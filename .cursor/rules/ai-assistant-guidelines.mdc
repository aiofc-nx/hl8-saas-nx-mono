---
description: HL8 SAAS平台 AI助手开发规范
globs:
alwaysApply: true
---

# HL8 SAAS 平台 AI 助手开发规范

> **版本**: 2.0.0 | **更新**: 2025-10-01 | **完整文档**: [docs/guidelines/](../../../docs/guidelines/)

---

## 🎯 项目架构

### 混合架构 = Clean Architecture + DDD + CQRS + ES + EDA

```
Interface → Application → Domain
     ↓           ↓
Infrastructure ←┘
```

**技术栈**: TypeScript + NestJS + Fastify + Nx + pnpm + PostgreSQL + Redis

---

## 🏗️ 核心原则

### 1. 充血模型（必须遵循）

**业务逻辑在实体内，服务层只协调**

```typescript
// ✅ 充血模型
class User extends BaseEntity {
  private status: UserStatus;
  
  activate(): void {
    if (this.status !== UserStatus.Pending) {
      throw new UserNotPendingException();
    }
    this.status = UserStatus.Active;
    this.addDomainEvent(new UserActivatedEvent(this.id));
  }
}

// ❌ 贫血模型（禁止）
class User { setStatus(status: string): void { } }
class UserService { activate(user: User) { /* 业务逻辑 */ } }  // ❌
```

### 2. 常量管理（必须遵循）

**每个项目必须创建 constants.ts，使用命名空间**

```typescript
// ✅ 正确
export const DI_TOKENS = {
  MODULE_OPTIONS: 'MODULE_OPTIONS',
} as const;

import { DI_TOKENS } from './constants';
@Inject(DI_TOKENS.MODULE_OPTIONS)

// ❌ 禁止硬编码
@Inject('MODULE_OPTIONS')  // ❌
```

### 3. TSDoc 注释（必须完整）

```typescript
/**
 * {功能简述}
 *
 * @description {详细描述}
 *
 * ## 业务规则
 * - {规则}
 *
 * @param {参数} - {说明}
 * @returns {返回值}
 * @throws {异常} {说明}
 * @example
 * ```typescript
 * {示例}
 * ```
 * @since 1.0.0
 */
```

**禁用**: @created, @author, @version

### 4. 零技术债

- ❌ 不保留向后兼容代码
- ❌ 不使用 deprecated
- ✅ 始终使用最佳实践

---

## 🏷️ 命名规范速查

| 类型 | 规范 | 示例 |
|------|------|------|
| 文件 | kebab-case | `user.service.ts` |
| 变量 | camelCase | `userName` |
| 常量 | UPPER_SNAKE_CASE | `MAX_RETRIES` |
| 函数 | camelCase+动词 | `createUser()` |
| 类 | PascalCase | `UserService` |
| 接口 | I+PascalCase | `IUserService` |

---

## 🔒 TypeScript 严格模式

```json
{ "strict": true, "noImplicitAny": true }
```

- ❌ 禁止 any
- ✅ 使用泛型或 unknown
- ✅ 常量使用 as const

---

## 📂 文件结构

```
packages/{module}/src/lib/
├── constants.ts       # 必需
├── {module}.module.ts
├── {module}.service.ts
├── entities/          # 充血模型实体
├── types/
└── ...
```

### 导入顺序

```typescript
// 1. Node.js内置 → 2. 外部依赖 → 3. 跨包依赖 → 4. 相对导入
```

---

## ✅ 代码生成检查清单

### 充血模型

- [ ] 业务逻辑在实体内
- [ ] 私有属性+公开方法
- [ ] 使用值对象
- [ ] 发布领域事件
- [ ] 使用业务语言命名

### 代码规范

- [ ] 有 constants.ts
- [ ] 完整 TSDoc 注释
- [ ] kebab-case 文件名
- [ ] 无硬编码
- [ ] 导入顺序正确

### 类型安全

- [ ] 严格模式
- [ ] 无 any
- [ ] 使用 as const

---

## 🚫 禁止

- ❌ 贫血模型（实体有 setter）
- ❌ 硬编码字符串/数字
- ❌ 缺少注释
- ❌ 使用 any
- ❌ 默认导出
- ❌ 服务层包含业务逻辑

---

## 📚 完整文档

- 📐 [架构设计](../../../docs/architecture/)
- 📋 [编码规范](../../../docs/guidelines/)
- 💡 [充血模型实践](../../../docs/guidelines/02-rich-domain-model-practice.md)
- 🔧 [常量管理](../../../docs/guidelines/03-constants-management.md)
